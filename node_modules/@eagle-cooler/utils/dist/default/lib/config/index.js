"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Scope = void 0;
exports.config = config;
var _jsonFile = _interopRequireDefault(require("../utils/_jsonFile.js"));
var _path = _interopRequireDefault(require("path"));
var _app = require("../utils/app.js");
var _os = _interopRequireDefault(require("os"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) { _classCheckPrivateStaticAccess(receiver, classConstructor); _classCheckPrivateStaticFieldDescriptor(descriptor, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classCheckPrivateStaticFieldDescriptor(descriptor, action) { if (descriptor === undefined) { throw new TypeError("attempted to " + action + " private static field before its declaration"); } }
function _classCheckPrivateStaticAccess(receiver, classConstructor) { if (receiver !== classConstructor) { throw new TypeError("Private static access of wrong provenance"); } }
function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; } /* global eagle */
// Scope enumeration
var Scope = exports.Scope = Object.freeze({
  APP: 'app',
  PLUGIN: 'plugin',
  ITEM: 'item',
  FOLDER: 'folder',
  LIBRARY: 'library',
  USER: 'user'
});
var FlagHandler = /*#__PURE__*/function () {
  function FlagHandler() {
    _classCallCheck(this, FlagHandler);
  }
  _createClass(FlagHandler, null, [{
    key: "register",
    value:
    /**
     * Register a flag handler with validation rules
     * @param {string} flag - The flag name
     * @param {Function} handler - The handler function that takes attributes and returns new attributes
     * @param {object} validation - Validation rules for the flag
     * @param {string[]} validation.invalidScopes - Scopes where this flag cannot be used
     * @param {Function} validation.requiresContext - Optional function to check if required context exists
     */
    function register(flag, handler) {
      var validation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      if (typeof handler !== 'function') {
        throw new Error('Handler must be a function');
      }
      _classStaticPrivateFieldSpecGet(FlagHandler, FlagHandler, _handlers).set(flag, handler);
      _classStaticPrivateFieldSpecGet(FlagHandler, FlagHandler, _validations).set(flag, validation);
    }

    /**
     * Process flags and return additional attributes
     * @param {string} scope - The scope to process flags for
     * @param {Set<string>} flags - The flags to process
     * @param {object} attributes - Current attributes to extend
     * @return {object} The combined attributes
     */
  }, {
    key: "processFlags",
    value: function processFlags(scope, flags) {
      var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var result = _objectSpread({}, attributes);
      var _iterator = _createForOfIteratorHelper(flags),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var flag = _step.value;
          var handler = _classStaticPrivateFieldSpecGet(FlagHandler, FlagHandler, _handlers).get(flag);
          if (handler) {
            result = handler(result);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return result;
    }

    /**
     * Validate flags for a given scope
     * @param {string} scope - The scope to validate flags for
     * @param {string[]} flags - The flags to validate
     * @throws {Error} If invalid flag combination is found
     */
  }, {
    key: "validateFlags",
    value: function validateFlags(scope, flags) {
      var _iterator2 = _createForOfIteratorHelper(flags),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _validation$invalidSc;
          var flag = _step2.value;
          var validation = _classStaticPrivateFieldSpecGet(FlagHandler, FlagHandler, _validations).get(flag);
          if (!validation) continue;

          // Check invalid scopes
          if ((_validation$invalidSc = validation.invalidScopes) !== null && _validation$invalidSc !== void 0 && _validation$invalidSc.includes(scope)) {
            throw new Error("Flag ".concat(flag, " cannot be used with scope ").concat(scope));
          }

          // Check context requirements
          if (validation.requiresContext && !validation.requiresContext()) {
            throw new Error("Flag ".concat(flag, " requires specific context that is not available"));
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }]);
  return FlagHandler;
}(); // Register default flag handlers with their validation rules
var _handlers = {
  writable: true,
  value: new Map()
};
var _validations = {
  writable: true,
  value: new Map()
};
FlagHandler.register('pluginOnly', function (attrs) {
  return _objectSpread(_objectSpread({}, attrs), {}, {
    pluginId: eagle.plugin.manifest.id
  });
}, {
  invalidScopes: ['plugin'],
  requiresContext: function requiresContext() {
    var _eagle;
    return ((_eagle = eagle) === null || _eagle === void 0 || (_eagle = _eagle.plugin) === null || _eagle === void 0 || (_eagle = _eagle.manifest) === null || _eagle === void 0 ? void 0 : _eagle.id) != null;
  }
});
FlagHandler.register('folderOnly', function (attrs) {
  return _objectSpread(_objectSpread({}, attrs), {}, {
    folderOnly: true
  });
}, {
  invalidScopes: ['folder']
});
var _createCache = /*#__PURE__*/new WeakSet();
var _getCache = /*#__PURE__*/new WeakSet();
var _parseKeyWithAttributes = /*#__PURE__*/new WeakSet();
var _buildKeyWithAttributes = /*#__PURE__*/new WeakSet();
var _buildKey = /*#__PURE__*/new WeakSet();
var _shouldUseUpstream = /*#__PURE__*/new WeakSet();
var _generateRefId = /*#__PURE__*/new WeakSet();
var _storeUpstream = /*#__PURE__*/new WeakSet();
var _getUpstream = /*#__PURE__*/new WeakSet();
var _areArraysEqual = /*#__PURE__*/new WeakSet();
var Config = /*#__PURE__*/function () {
  function Config(scope) {
    var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    _classCallCheck(this, Config);
    /**
     * Compare two arrays for equality
     * @private
     * @param {Array} arr1 - First array
     * @param {Array} arr2 - Second array
     * @return {boolean} Whether the arrays are equal
     */
    _classPrivateMethodInitSpec(this, _areArraysEqual);
    /**
     * Get data from library level using references
     * @private
     * @param {string} key - The key to retrieve
     * @return {*} The stored value or undefined
     */
    _classPrivateMethodInitSpec(this, _getUpstream);
    /**
     * Store data at library level with references
     * @private
     * @param {string} key - The key to store
     * @param {*} value - The value to store
     * @return {string} The reference ID
     */
    _classPrivateMethodInitSpec(this, _storeUpstream);
    /**
     * Generate a unique reference ID
     * @private
     * @return {string} A unique reference ID
     */
    _classPrivateMethodInitSpec(this, _generateRefId);
    /**
     * Check if we should use upstream storage based on the number of items/folders
     * @private
     * @return {boolean} Whether upstream storage should be used
     */
    _classPrivateMethodInitSpec(this, _shouldUseUpstream);
    _classPrivateMethodInitSpec(this, _buildKey);
    _classPrivateMethodInitSpec(this, _buildKeyWithAttributes);
    _classPrivateMethodInitSpec(this, _parseKeyWithAttributes);
    _classPrivateMethodInitSpec(this, _getCache);
    _classPrivateMethodInitSpec(this, _createCache);
    FlagHandler.validateFlags(scope, flags);
    this.scope = scope;
    this.flags = new Set(flags);
    this._args = null;
    this._cache = null;
    this.keyUpstreamToggle = true;
    this.keyUpstreamThreshold = 3;
  }

  /**
   * Supply arguments for the config instance
   * @param {object} args - Arguments object
   * @param {object | object[]} [args.item] - Single item or array of items
   * @param {object | object[]} [args.folder] - Single folder or array of folders
   * @return {Promise<Config>} The config instance for chaining
   * @throws {Error} If invalid arguments are provided
   */
  _createClass(Config, [{
    key: "supplyArgs",
    value: (function () {
      var _supplyArgs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var args,
          item,
          folder,
          selected,
          _selected,
          _args = arguments;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              args = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
              item = args.item, folder = args.folder; // Validate that we don't have both items and folders
              if (!(item && folder)) {
                _context.next = 4;
                break;
              }
              throw new Error('Cannot supply both items and folders');
            case 4:
              if (!(!item && !folder)) {
                _context.next = 23;
                break;
              }
              if (!(this.scope === Scope.ITEM)) {
                _context.next = 14;
                break;
              }
              _context.next = 8;
              return eagle.item.getSelected();
            case 8:
              selected = _context.sent;
              if (selected !== null && selected !== void 0 && selected.length) {
                _context.next = 11;
                break;
              }
              throw new Error('No items selected');
            case 11:
              this._args = {
                item: selected
              };
              _context.next = 21;
              break;
            case 14:
              if (!(this.scope === Scope.FOLDER)) {
                _context.next = 21;
                break;
              }
              _context.next = 17;
              return eagle.folder.getSelected();
            case 17:
              _selected = _context.sent;
              if (_selected !== null && _selected !== void 0 && _selected.length) {
                _context.next = 20;
                break;
              }
              throw new Error('No folders selected');
            case 20:
              this._args = {
                folder: _selected
              };
            case 21:
              _context.next = 24;
              break;
            case 23:
              this._args = args;
            case 24:
              // Create cache after args are set
              this._cache = _classPrivateMethodGet(this, _createCache, _createCache2).call(this);
              return _context.abrupt("return", this);
            case 26:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function supplyArgs() {
        return _supplyArgs.apply(this, arguments);
      }
      return supplyArgs;
    }())
  }, {
    key: "get",
    value: function get(key) {
      if (_classPrivateMethodGet(this, _shouldUseUpstream, _shouldUseUpstream2).call(this)) {
        return _classPrivateMethodGet(this, _getUpstream, _getUpstream2).call(this, key);
      }
      return _classPrivateMethodGet(this, _getCache, _getCache2).call(this).get(_classPrivateMethodGet(this, _buildKey, _buildKey2).call(this, key));
    }
  }, {
    key: "set",
    value: function set(key, value) {
      if (_classPrivateMethodGet(this, _shouldUseUpstream, _shouldUseUpstream2).call(this)) {
        _classPrivateMethodGet(this, _storeUpstream, _storeUpstream2).call(this, key, value);
      } else {
        _classPrivateMethodGet(this, _getCache, _getCache2).call(this).set(_classPrivateMethodGet(this, _buildKey, _buildKey2).call(this, key), value);
      }
    }

    /**
     * Set a value only if it doesn't already exist
     * @param {string} key - The key to set
     * @param {*} value - The default value to set if key doesn't exist
     * @return {*} The existing value if present, otherwise the new value
     */
  }, {
    key: "setdefault",
    value: function setdefault(key, value) {
      var existingValue = this.get(key);
      if (existingValue === undefined) {
        this.set(key, value);
        return value;
      }
      return existingValue;
    }

    /**
     * Remove and return the value for a key
     * @param {string} key - The key to remove
     * @return {*} The value that was removed, or undefined if not found
     */
  }, {
    key: "pop",
    value: function pop(key) {
      var value = this.get(key);
      this["delete"](key);
      return value;
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      if (_classPrivateMethodGet(this, _shouldUseUpstream, _shouldUseUpstream2).call(this)) {
        var _this$_args, _this$_args2;
        var libraryConfig = _jsonFile["default"].getInstance(_path["default"].join(eagle.library.path, 'coolerConfig.json'));

        // Get current items/folders
        var items = (_this$_args = this._args) === null || _this$_args === void 0 ? void 0 : _this$_args.item;
        var folders = (_this$_args2 = this._args) === null || _this$_args2 === void 0 ? void 0 : _this$_args2.folder;
        var current = Array.isArray(items) ? items : Array.isArray(folders) ? folders : [];

        // Find and remove matching reference
        for (var _i = 0, _Object$entries = Object.entries(libraryConfig.getAll()); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
            refKey = _Object$entries$_i[0],
            affected = _Object$entries$_i[1];
          if (refKey.startsWith('@')) {
            var refId = refKey.substring(1);
            if (_classPrivateMethodGet(this, _areArraysEqual, _areArraysEqual2).call(this, affected, current)) {
              // Remove the reference mapping
              libraryConfig["delete"](refKey);

              // Remove the data entry
              var _classPrivateMethodGe = _classPrivateMethodGet(this, _parseKeyWithAttributes, _parseKeyWithAttributes2).call(this, key),
                attributes = _classPrivateMethodGe.attributes,
                baseKey = _classPrivateMethodGe.key;
              var dataKey = _classPrivateMethodGet(this, _buildKeyWithAttributes, _buildKeyWithAttributes2).call(this, _objectSpread(_objectSpread({}, attributes), {}, {
                ref: refId
              }), baseKey);
              libraryConfig["delete"](dataKey);
              break;
            }
          }
        }
      } else {
        _classPrivateMethodGet(this, _getCache, _getCache2).call(this)["delete"](_classPrivateMethodGet(this, _buildKey, _buildKey2).call(this, key));
      }
    }
  }]);
  return Config;
}();
/**
 * Creates a new Config instance for the given scope and flags.
 *
 * @param {string} scope - The scope of the configuration.
 * @param {string[]} flags - The flags to apply to the configuration.
 * @return {Config} A new Config instance.
 */
function _createCache2() {
  var _eagle2, _eagle3, _eagle4;
  switch (this.scope) {
    case Scope.APP:
      return _jsonFile["default"].getInstance(_path["default"].join(_app.roamingPath, 'coolerConfig.json'));
    case Scope.PLUGIN:
      if (!((_eagle2 = eagle) !== null && _eagle2 !== void 0 && (_eagle2 = _eagle2.plugin) !== null && _eagle2 !== void 0 && (_eagle2 = _eagle2.manifest) !== null && _eagle2 !== void 0 && _eagle2.id)) {
        throw new Error('Plugin scope requires active plugin context');
      }
      return _jsonFile["default"].getInstance(_path["default"].join(eagle.plugin.path, 'coolerConfig.json'));
    case Scope.ITEM:
      {
        var _this$_args3;
        if (!((_this$_args3 = this._args) !== null && _this$_args3 !== void 0 && _this$_args3.item)) {
          throw new Error('Item scope requires items to be supplied');
        }
        var items = Array.isArray(this._args.item) ? this._args.item : [this._args.item];

        // For multiple items, use the first item's directory
        return _jsonFile["default"].getInstance(_path["default"].join(_path["default"].dirname(items[0].filePath), 'coolerConfig.json'));
      }
    case Scope.FOLDER:
      if (!((_eagle3 = eagle) !== null && _eagle3 !== void 0 && (_eagle3 = _eagle3.library) !== null && _eagle3 !== void 0 && _eagle3.path)) {
        throw new Error('Folder scope requires active library context');
      }
      return _jsonFile["default"].getInstance(_path["default"].join(eagle.library.path, 'coolerConfig.json'));
    case Scope.LIBRARY:
      if (!((_eagle4 = eagle) !== null && _eagle4 !== void 0 && (_eagle4 = _eagle4.library) !== null && _eagle4 !== void 0 && _eagle4.path)) {
        throw new Error('Library scope requires active library context');
      }
      return _jsonFile["default"].getInstance(_path["default"].join(eagle.library.path, 'coolerConfig.json'));
    case Scope.USER:
      return _jsonFile["default"].getInstance(_path["default"].join(_os["default"].homedir(), '.eaglecooler', 'coolerConfig.json'));
    default:
      throw new Error("Invalid scope: ".concat(this.scope));
  }
}
function _getCache2() {
  if (!this._cache) {
    this._cache = _classPrivateMethodGet(this, _createCache, _createCache2).call(this);
  }
  return this._cache;
}
function _parseKeyWithAttributes2(key) {
  // Check if key starts with a JSON object
  var match = key.match(/^\{([^}]+)\}(.+)$/);
  if (!match) {
    return {
      attributes: {},
      key: key
    };
  }
  var _match = _slicedToArray(match, 3),
    attrsStr = _match[1],
    actualKey = _match[2];

  // Parse the attributes string
  var attributes = {};
  var pairs = attrsStr.split('&');
  var _iterator3 = _createForOfIteratorHelper(pairs),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var pair = _step3.value;
      var _pair$split = pair.split('='),
        _pair$split2 = _slicedToArray(_pair$split, 2),
        k = _pair$split2[0],
        v = _pair$split2[1];
      if (k && v) {
        attributes[k] = v;
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  return {
    attributes: attributes,
    key: actualKey
  };
}
function _buildKeyWithAttributes2(attributes, key) {
  if (!attributes || Object.keys(attributes).length === 0) {
    return key;
  }

  // Sort attributes to ensure consistent key generation
  var sortedEntries = Object.entries(attributes).sort(function (_ref, _ref2) {
    var _ref3 = _slicedToArray(_ref, 1),
      a = _ref3[0];
    var _ref4 = _slicedToArray(_ref2, 1),
      b = _ref4[0];
    return a.localeCompare(b);
  });
  var attrsStr = sortedEntries.map(function (_ref5) {
    var _ref6 = _slicedToArray(_ref5, 2),
      k = _ref6[0],
      v = _ref6[1];
    return "".concat(k, "=").concat(v);
  }).join('&');
  return "{".concat(attrsStr, "}").concat(key);
}
function _buildKey2(key) {
  // Parse any existing attributes from the key
  var _classPrivateMethodGe2 = _classPrivateMethodGet(this, _parseKeyWithAttributes, _parseKeyWithAttributes2).call(this, key),
    attributes = _classPrivateMethodGe2.attributes,
    baseKey = _classPrivateMethodGe2.key;

  // Process flags to add additional attributes
  var scopeAttributes = FlagHandler.processFlags(this.scope, this.flags, attributes);

  // Build the final key with all attributes
  return _classPrivateMethodGet(this, _buildKeyWithAttributes, _buildKeyWithAttributes2).call(this, scopeAttributes, baseKey);
}
function _shouldUseUpstream2() {
  var _this$_args4, _this$_args5;
  if (!this.keyUpstreamToggle) return false;
  var items = (_this$_args4 = this._args) === null || _this$_args4 === void 0 ? void 0 : _this$_args4.item;
  var folders = (_this$_args5 = this._args) === null || _this$_args5 === void 0 ? void 0 : _this$_args5.folder;
  var count = Array.isArray(items) ? items.length : Array.isArray(folders) ? folders.length : 0;
  return count > this.keyUpstreamThreshold;
}
function _generateRefId2() {
  return Math.random().toString(36).substring(2, 15);
}
function _storeUpstream2(key, value) {
  var _this$_args6, _this$_args7;
  var refId = _classPrivateMethodGet(this, _generateRefId, _generateRefId2).call(this);
  var libraryConfig = _jsonFile["default"].getInstance(_path["default"].join(eagle.library.path, 'coolerConfig.json'));

  // Get the items/folders to store in the reference
  var items = (_this$_args6 = this._args) === null || _this$_args6 === void 0 ? void 0 : _this$_args6.item;
  var folders = (_this$_args7 = this._args) === null || _this$_args7 === void 0 ? void 0 : _this$_args7.folder;
  var affected = Array.isArray(items) ? items : Array.isArray(folders) ? folders : [];

  // Store the reference mapping
  libraryConfig.set("@".concat(refId), affected);

  // Store the actual data with reference ID in attributes
  var _classPrivateMethodGe3 = _classPrivateMethodGet(this, _parseKeyWithAttributes, _parseKeyWithAttributes2).call(this, key),
    attributes = _classPrivateMethodGe3.attributes,
    baseKey = _classPrivateMethodGe3.key;
  var dataKey = _classPrivateMethodGet(this, _buildKeyWithAttributes, _buildKeyWithAttributes2).call(this, _objectSpread(_objectSpread({}, attributes), {}, {
    ref: refId
  }), baseKey);
  libraryConfig.set(dataKey, value);
  return refId;
}
function _getUpstream2(key) {
  var _this$_args8, _this$_args9;
  var libraryConfig = _jsonFile["default"].getInstance(_path["default"].join(eagle.library.path, 'coolerConfig.json'));

  // Get current items/folders
  var items = (_this$_args8 = this._args) === null || _this$_args8 === void 0 ? void 0 : _this$_args8.item;
  var folders = (_this$_args9 = this._args) === null || _this$_args9 === void 0 ? void 0 : _this$_args9.folder;
  var current = Array.isArray(items) ? items : Array.isArray(folders) ? folders : [];

  // Find a reference that matches our current items/folders
  for (var _i2 = 0, _Object$entries2 = Object.entries(libraryConfig.getAll()); _i2 < _Object$entries2.length; _i2++) {
    var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
      refKey = _Object$entries2$_i[0],
      affected = _Object$entries2$_i[1];
    if (refKey.startsWith('@')) {
      var refId = refKey.substring(1);
      if (_classPrivateMethodGet(this, _areArraysEqual, _areArraysEqual2).call(this, affected, current)) {
        // Found matching reference, get the data
        var _classPrivateMethodGe4 = _classPrivateMethodGet(this, _parseKeyWithAttributes, _parseKeyWithAttributes2).call(this, key),
          attributes = _classPrivateMethodGe4.attributes,
          baseKey = _classPrivateMethodGe4.key;
        var dataKey = _classPrivateMethodGet(this, _buildKeyWithAttributes, _buildKeyWithAttributes2).call(this, _objectSpread(_objectSpread({}, attributes), {}, {
          ref: refId
        }), baseKey);
        return libraryConfig.get(dataKey);
      }
    }
  }
  return undefined;
}
function _areArraysEqual2(arr1, arr2) {
  if (!Array.isArray(arr1) || !Array.isArray(arr2)) return false;
  if (arr1.length !== arr2.length) return false;

  // Sort both arrays by filePath for comparison
  var sorted1 = _toConsumableArray(arr1).sort(function (a, b) {
    return a.filePath.localeCompare(b.filePath);
  });
  var sorted2 = _toConsumableArray(arr2).sort(function (a, b) {
    return a.filePath.localeCompare(b.filePath);
  });
  return sorted1.every(function (item, i) {
    return item.filePath === sorted2[i].filePath;
  });
}
function config(scope) {
  var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return new Config(scope, flags);
}