"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StatelessSubscriber = exports.StatefulSubscriber = void 0;
exports.getGlobalSubscriber = getGlobalSubscriber;
exports.is_server_available = is_server_available;
exports.start_server = start_server;
var _eventsource = require("eventsource");
var _child_process = require("child_process");
var _path = _interopRequireDefault(require("path"));
var _run = require("./run.js");
var _setup = require("./setup.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var SERVER_PORT = 41599;

// Server management
var serverProcess = null;

/**
 * Check if the Python Flask server is available
 * @returns {Promise<boolean>}
 */
function is_server_available() {
  return _is_server_available.apply(this, arguments);
}
/**
 * Start the Python Flask server if not already running
 * @returns {Promise<void>}
 */
function _is_server_available() {
  _is_server_available = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
    var response;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return fetch("http://localhost:".concat(SERVER_PORT, "/health"), {
            method: 'GET',
            timeout: 1000
          });
        case 3:
          response = _context4.sent;
          return _context4.abrupt("return", response.ok);
        case 7:
          _context4.prev = 7;
          _context4.t0 = _context4["catch"](0);
          return _context4.abrupt("return", false);
        case 10:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 7]]);
  }));
  return _is_server_available.apply(this, arguments);
}
function start_server() {
  return _start_server.apply(this, arguments);
} // Global subscriber instance
function _start_server() {
  _start_server = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
    var pythonPath, serverScript, env, attempts, maxAttempts;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return is_server_available();
        case 2:
          if (!_context5.sent) {
            _context5.next = 5;
            break;
          }
          console.log('Server already available on port', SERVER_PORT);
          return _context5.abrupt("return");
        case 5:
          // Check if we have a process running in this instance
          if (serverProcess) {
            console.log('Cleaning up stale server process');
            try {
              serverProcess.kill();
            } catch (e) {
              console.warn('Failed to kill stale server process:', e);
            }
            serverProcess = null;
          }

          // Install Flask if not already installed
          _context5.next = 8;
          return (0, _setup.pip_install)(['flask']);
        case 8:
          _context5.next = 10;
          return (0, _run.resolve_python_env)();
        case 10:
          pythonPath = _context5.sent;
          serverScript = _path["default"].join(_path["default"].dirname(import.meta.url.substring(7)), 'server.py'); // Set environment variables for the server
          env = _objectSpread(_objectSpread({}, process.env), {}, {
            PYTHON_PATH: pythonPath,
            PORT: SERVER_PORT.toString()
          });
          console.log('Starting Python server...');

          // Start server process using spawn instead of execSync
          serverProcess = (0, _child_process.spawn)(pythonPath, [serverScript], {
            env: env,
            stdio: 'inherit',
            detached: true
          });

          // Wait for server to become available
          attempts = 0;
          maxAttempts = 10;
        case 17:
          if (!(attempts < maxAttempts)) {
            _context5.next = 28;
            break;
          }
          _context5.next = 20;
          return is_server_available();
        case 20:
          if (!_context5.sent) {
            _context5.next = 23;
            break;
          }
          console.log('Server started and available on port', SERVER_PORT);
          return _context5.abrupt("return");
        case 23:
          _context5.next = 25;
          return new Promise(function (resolve) {
            return setTimeout(resolve, 500);
          });
        case 25:
          attempts++;
          _context5.next = 17;
          break;
        case 28:
          throw new Error('Server failed to start after multiple attempts');
        case 29:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return _start_server.apply(this, arguments);
}
var globalSubscriber = null;

/**
 * StatefulSubscriber class for managing plugin subscriptions
 */
var StatefulSubscriber = exports.StatefulSubscriber = /*#__PURE__*/function () {
  function StatefulSubscriber(pluginId) {
    _classCallCheck(this, StatefulSubscriber);
    this.pluginId = pluginId;
    this.baseUrl = "http://localhost:".concat(SERVER_PORT);
    this.handlers = {
      stdout: new Map(),
      stderr: new Map(),
      stdin: new Map()
    };
    this.eventSources = {
      stdout: null,
      stderr: null
    };
  }

  /**
   * Register a handler for a stream type
   * @param {string} streamType - Type of stream ('stdout' or 'stderr')
   * @param {Function} handler - Handler function
   * @param {Function} [matchFn] - Optional matching function
   * @returns {string} Handler ID
   */
  _createClass(StatefulSubscriber, [{
    key: "on",
    value: function on(streamType, handler) {
      var matchFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      if (!['stdout', 'stderr'].includes(streamType)) {
        throw new Error('Invalid stream type');
      }
      var handlerId = Math.random().toString(36).substring(7);
      this.handlers[streamType].set(handlerId, {
        handler: handler,
        matchFn: matchFn
      });

      // Start listening if not already
      if (!this.eventSources[streamType]) {
        this._startListening(streamType);
      }
      return handlerId;
    }

    /**
     * Remove a handler
     * @param {string} streamType - Type of stream
     * @param {string} handlerId - Handler ID to remove
     */
  }, {
    key: "off",
    value: function off(streamType, handlerId) {
      if (this.handlers[streamType].has(handlerId)) {
        this.handlers[streamType]["delete"](handlerId);

        // Stop listening if no handlers left
        if (this.handlers[streamType].size === 0) {
          this._stopListening(streamType);
        }
      }
    }

    /**
     * Send input to the plugin
     * @param {string} input - Input to send
     */
  }, {
    key: "sendBack",
    value: (function () {
      var _sendBack = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {
        var response;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return fetch("".concat(this.baseUrl, "/stdin/").concat(this.pluginId), {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  input: input
                })
              });
            case 2:
              response = _context.sent;
              if (response.ok) {
                _context.next = 5;
                break;
              }
              throw new Error('Failed to send input');
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function sendBack(_x) {
        return _sendBack.apply(this, arguments);
      }
      return sendBack;
    }()
    /**
     * Fire a function in the plugin
     * @param {string} funcName - Function name to execute
     * @param {Array} args - Arguments for the function
     * @param {Object} kwargs - Keyword arguments for the function
     */
    )
  }, {
    key: "fire",
    value: (function () {
      var _fire = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(funcName) {
        var args,
          kwargs,
          response,
          _args2 = arguments;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              args = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : [];
              kwargs = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};
              _context2.next = 4;
              return fetch("".concat(this.baseUrl, "/fire/").concat(this.pluginId), {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  func: funcName,
                  args: args,
                  kwargs: kwargs
                })
              });
            case 4:
              response = _context2.sent;
              if (response.ok) {
                _context2.next = 7;
                break;
              }
              throw new Error('Failed to fire function');
            case 7:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function fire(_x2) {
        return _fire.apply(this, arguments);
      }
      return fire;
    }()
    /**
     * Start listening to a stream
     * @private
     */
    )
  }, {
    key: "_startListening",
    value: function _startListening(streamType) {
      var _this = this;
      var eventSource = new _eventsource.EventSource("".concat(this.baseUrl, "/subscribe/").concat(this.pluginId, "/").concat(streamType));
      eventSource.onmessage = function (event) {
        var data = event.data;

        // Call all matching handlers
        var _iterator = _createForOfIteratorHelper(_this.handlers[streamType]),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray(_step.value, 2),
              id = _step$value[0],
              _step$value$ = _step$value[1],
              handler = _step$value$.handler,
              matchFn = _step$value$.matchFn;
            if (!matchFn || matchFn(data)) {
              handler(data, _this);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      };
      eventSource.onerror = function (error) {
        console.error("Error in ".concat(streamType, " stream:"), error);
        _this._stopListening(streamType);
        // Attempt to reconnect after a delay
        setTimeout(function () {
          return _this._startListening(streamType);
        }, 5000);
      };
      this.eventSources[streamType] = eventSource;
    }

    /**
     * Stop listening to a stream
     * @private
     */
  }, {
    key: "_stopListening",
    value: function _stopListening(streamType) {
      if (this.eventSources[streamType]) {
        this.eventSources[streamType].close();
        this.eventSources[streamType] = null;
      }
    }

    /**
     * Clean up all subscriptions
     */
  }, {
    key: "cleanup",
    value: function cleanup() {
      var _this2 = this;
      Object.keys(this.eventSources).forEach(function (streamType) {
        _this2._stopListening(streamType);
      });
    }
  }]);
  return StatefulSubscriber;
}();
/**
 * StatelessSubscriber class for simple event handling
 */
var StatelessSubscriber = exports.StatelessSubscriber = /*#__PURE__*/function () {
  function StatelessSubscriber(pluginId) {
    _classCallCheck(this, StatelessSubscriber);
    this.pluginId = pluginId;
    this.baseUrl = "http://localhost:".concat(SERVER_PORT);
    this.eventSource = null;
  }

  /**
   * Subscribe to stdout with optional matching
   * @param {Function} handler - Handler function
   * @param {Function} [matchFn] - Optional matching function
   */
  _createClass(StatelessSubscriber, [{
    key: "onStdout",
    value: function onStdout(handler) {
      var matchFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      this._subscribe('stdout', handler, matchFn);
    }

    /**
     * Subscribe to stderr
     * @param {Function} handler - Handler function
     */
  }, {
    key: "onError",
    value: function onError(handler) {
      this._subscribe('stderr', handler);
    }

    /**
     * Subscribe to a stream
     * @private
     */
  }, {
    key: "_subscribe",
    value: function _subscribe(streamType, handler) {
      var _this3 = this;
      var matchFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      if (this.eventSource) {
        this.eventSource.close();
      }
      var eventSource = new _eventsource.EventSource("".concat(this.baseUrl, "/subscribe/").concat(this.pluginId, "/").concat(streamType));
      eventSource.onmessage = function (event) {
        var data = event.data;
        if (!matchFn || matchFn(data)) {
          handler(data);
        }
      };
      eventSource.onerror = function (error) {
        console.error("Error in ".concat(streamType, " stream:"), error);
        eventSource.close();
        _this3.eventSource = null;
      };
      this.eventSource = eventSource;
    }

    /**
     * Clean up the subscription
     */
  }, {
    key: "cleanup",
    value: function cleanup() {
      if (this.eventSource) {
        this.eventSource.close();
        this.eventSource = null;
      }
    }
  }]);
  return StatelessSubscriber;
}();
/**
 * GlobalSubscriber class for monitoring all plugin outputs
 */
var GlobalSubscriber = /*#__PURE__*/function () {
  function GlobalSubscriber() {
    _classCallCheck(this, GlobalSubscriber);
    this.baseUrl = "http://localhost:".concat(SERVER_PORT);
    this.pluginHandlers = new Map();
    this.globalHandlers = {
      stdout: new Set(),
      stderr: new Set()
    };
    this.eventSources = {
      stdout: null,
      stderr: null
    };
    this.running = false;
  }

  /**
   * Start the global subscriber
   */
  _createClass(GlobalSubscriber, [{
    key: "start",
    value: (function () {
      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!this.running) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return");
            case 2:
              _context3.next = 4;
              return start_server();
            case 4:
              // Start listening to both streams
              this._startListening('stdout');
              this._startListening('stderr');
              this.running = true;
              console.log('Global subscriber started');
            case 8:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function start() {
        return _start.apply(this, arguments);
      }
      return start;
    }()
    /**
     * Register a handler for a specific plugin
     * @param {string} pluginId - Plugin ID to monitor
     * @param {Object} handlers - Handler configuration
     * @param {Function} [handlers.stdout] - stdout handler
     * @param {Function} [handlers.stderr] - stderr handler
     * @param {Function} [handlers.match] - Optional matching function
     */
    )
  }, {
    key: "onPlugin",
    value: function onPlugin(pluginId, handlers) {
      this.pluginHandlers.set(pluginId, handlers);
    }

    /**
     * Remove handlers for a specific plugin
     * @param {string} pluginId - Plugin ID to remove handlers for
     */
  }, {
    key: "offPlugin",
    value: function offPlugin(pluginId) {
      this.pluginHandlers["delete"](pluginId);
    }

    /**
     * Register a global handler
     * @param {string} streamType - Type of stream ('stdout' or 'stderr')
     * @param {Function} handler - Handler function
     */
  }, {
    key: "onGlobal",
    value: function onGlobal(streamType, handler) {
      if (streamType in this.globalHandlers) {
        this.globalHandlers[streamType].add(handler);
      }
    }

    /**
     * Remove a global handler
     * @param {string} streamType - Type of stream ('stdout' or 'stderr')
     * @param {Function} handler - Handler function to remove
     */
  }, {
    key: "offGlobal",
    value: function offGlobal(streamType, handler) {
      if (streamType in this.globalHandlers) {
        this.globalHandlers[streamType]["delete"](handler);
      }
    }

    /**
     * Start listening to a stream
     * @private
     */
  }, {
    key: "_startListening",
    value: function _startListening(streamType) {
      var _this4 = this;
      if (this.eventSources[streamType]) {
        this.eventSources[streamType].close();
      }
      var eventSource = new _eventsource.EventSource("".concat(this.baseUrl, "/subscribe/global/").concat(streamType));
      eventSource.onmessage = function (event) {
        var data = event.data;

        // Parse plugin ID from output format: <plugin_id> [stream_type] message
        var match = data.match(/^<([^>]+)> \[([^\]]+)\] (.+)$/);
        if (match) {
          var _match = _slicedToArray(match, 4),
            _ = _match[0],
            pluginId = _match[1],
            type = _match[2],
            message = _match[3];

          // Call plugin-specific handlers
          var pluginHandler = _this4.pluginHandlers.get(pluginId);
          if (pluginHandler) {
            var streamHandler = pluginHandler[streamType];
            var matchFn = pluginHandler.match;
            if (streamHandler && (!matchFn || matchFn(message))) {
              streamHandler(message, pluginId);
            }
          }

          // Call global handlers
          var _iterator2 = _createForOfIteratorHelper(_this4.globalHandlers[streamType]),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var handler = _step2.value;
              handler(message, pluginId);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      };
      eventSource.onerror = function (error) {
        console.error("Error in global ".concat(streamType, " stream:"), error);
        _this4.eventSources[streamType] = null;
        // Attempt to reconnect after a delay
        setTimeout(function () {
          return _this4._startListening(streamType);
        }, 5000);
      };
      this.eventSources[streamType] = eventSource;
    }

    /**
     * Stop the global subscriber
     */
  }, {
    key: "stop",
    value: function stop() {
      Object.values(this.eventSources).forEach(function (source) {
        if (source) source.close();
      });
      this.eventSources = {
        stdout: null,
        stderr: null
      };
      this.running = false;
      console.log('Global subscriber stopped');
    }
  }]);
  return GlobalSubscriber;
}();
/**
 * Get or create the global subscriber instance
 * @returns {GlobalSubscriber}
 */
function getGlobalSubscriber() {
  if (!globalSubscriber) {
    globalSubscriber = new GlobalSubscriber();
  }
  return globalSubscriber;
}