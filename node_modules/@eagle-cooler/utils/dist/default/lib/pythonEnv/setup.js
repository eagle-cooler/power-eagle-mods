"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensure_environment = ensure_environment;
exports.getPythonExeFromDir = getPythonExeFromDir;
exports.get_release_download_url = get_release_download_url;
exports.isValidPythonPath = isValidPythonPath;
exports.pip_install = pip_install;
exports.setup_plugin_venv = setup_plugin_venv;
var _path = _interopRequireDefault(require("path"));
var _fs = _interopRequireDefault(require("fs"));
var _os = _interopRequireDefault(require("os"));
var _child_process = require("child_process");
var _native = require("../utils/native");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
/**
 * Check if a path points to a valid Python executable
 * @param {string} pythonPath - Path to check
 * @returns {boolean} Whether the path is valid
 */
function isValidPythonPath(pythonPath) {
  if (!_fs["default"].existsSync(pythonPath)) {
    return false;
  }
  try {
    var result = (0, _child_process.execSync)("\"".concat(pythonPath, "\" --version"), {
      encoding: 'utf8',
      stdio: ['pipe', 'pipe', 'pipe']
    });
    return result.toLowerCase().includes('python');
  } catch (error) {
    return false;
  }
}

/**
 * Get Python executable path from a base directory
 * @param {string} baseDir - Base directory to check
 * @returns {string|null} Path to Python executable or null if not found
 */
function getPythonExeFromDir(baseDir) {
  var _global$eagle;
  var possiblePaths = (_global$eagle = global.eagle) !== null && _global$eagle !== void 0 && (_global$eagle = _global$eagle.app) !== null && _global$eagle !== void 0 && _global$eagle.isWindows ? [_path["default"].join(baseDir, 'bin', 'python.exe'), _path["default"].join(baseDir, 'Scripts', 'python.exe'), _path["default"].join(baseDir, 'python.exe')] : [_path["default"].join(baseDir, 'bin', 'python'), _path["default"].join(baseDir, 'python')];
  for (var _i = 0, _possiblePaths = possiblePaths; _i < _possiblePaths.length; _i++) {
    var pythonPath = _possiblePaths[_i];
    if (_fs["default"].existsSync(pythonPath) && isValidPythonPath(pythonPath)) {
      return pythonPath;
    }
  }
  return null;
}

/**
 * Compare version strings
 * @param {string} a - First version
 * @param {string} b - Second version
 * @returns {number} Comparison result (-1, 0, 1)
 */
function compareVersions(a, b) {
  var _a$split$map = a.split('.').map(Number),
    _a$split$map2 = _slicedToArray(_a$split$map, 3),
    aMajor = _a$split$map2[0],
    aMinor = _a$split$map2[1],
    aPatch = _a$split$map2[2];
  var _b$split$map = b.split('.').map(Number),
    _b$split$map2 = _slicedToArray(_b$split$map, 3),
    bMajor = _b$split$map2[0],
    bMinor = _b$split$map2[1],
    bPatch = _b$split$map2[2];
  if (aMajor !== bMajor) return aMajor - bMajor;
  if (aMinor !== bMinor) return aMinor - bMinor;
  return aPatch - bPatch;
}

/**
 * Find the closest version and its latest build
 * @param {Array<{version: string, build: string}>} versions - Available versions
 * @param {string} targetVersion - Requested version
 * @returns {{version: string, build: string, assets: Array}} Closest version info
 */
function findClosestVersion(versions, targetVersion) {
  // First try exact match
  var exactMatch = versions.filter(function (v) {
    return v.version === targetVersion;
  }).sort(function (a, b) {
    return parseInt(b.build) - parseInt(a.build);
  })[0];
  if (exactMatch) return exactMatch;

  // Get major.minor from target
  var _targetVersion$split$ = targetVersion.split('.').map(Number),
    _targetVersion$split$2 = _slicedToArray(_targetVersion$split$, 2),
    targetMajor = _targetVersion$split$2[0],
    targetMinor = _targetVersion$split$2[1];

  // Find all versions with same major.minor
  var sameMinor = versions.filter(function (v) {
    var _v$version$split$map = v.version.split('.').map(Number),
      _v$version$split$map2 = _slicedToArray(_v$version$split$map, 2),
      major = _v$version$split$map2[0],
      minor = _v$version$split$map2[1];
    return major === targetMajor && minor === targetMinor;
  });
  if (sameMinor.length > 0) {
    // Return the highest patch version with highest build number
    return sameMinor.sort(function (a, b) {
      var versionCompare = compareVersions(b.version, a.version);
      if (versionCompare !== 0) return versionCompare;
      return parseInt(b.build) - parseInt(a.build);
    })[0];
  }

  // Find closest major version
  var sameMajor = versions.filter(function (v) {
    var _v$version$split$map3 = v.version.split('.').map(Number),
      _v$version$split$map4 = _slicedToArray(_v$version$split$map3, 1),
      major = _v$version$split$map4[0];
    return major === targetMajor;
  });
  if (sameMajor.length > 0) {
    return sameMajor.sort(function (a, b) {
      var versionCompare = compareVersions(b.version, a.version);
      if (versionCompare !== 0) return versionCompare;
      return parseInt(b.build) - parseInt(a.build);
    })[0];
  }

  // Return latest version as fallback
  return versions.sort(function (a, b) {
    var versionCompare = compareVersions(b.version, a.version);
    if (versionCompare !== 0) return versionCompare;
    return parseInt(b.build) - parseInt(a.build);
  })[0];
}

/**
 * Get available Python versions from GitHub releases
 * @returns {Promise<Array<{version: string, build: string}>>}
 */
function getAvailableVersions() {
  return _getAvailableVersions.apply(this, arguments);
}
/**
 * Get the download URL for a specific Python version
 * @param {string} version - Python version (e.g., '3.12.8')
 * @param {string} arch - Architecture (default: 'x86_64')
 * @param {string} os - Operating system (default: 'windows')
 * @returns {Promise<string>} Download URL
 */
function _getAvailableVersions() {
  _getAvailableVersions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var response, releases;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return fetch('https://api.github.com/repos/bjia56/portable-python/releases');
        case 3:
          response = _context.sent;
          _context.next = 6;
          return response.json();
        case 6:
          releases = _context.sent;
          return _context.abrupt("return", releases.map(function (release) {
            var match = release.tag_name.match(/cpython-v(\d+\.\d+\.\d+)-build\.(\d+)/);
            if (match) {
              return {
                version: match[1],
                build: match[2],
                assets: release.assets,
                tag: release.tag_name
              };
            }
            return null;
          }).filter(Boolean));
        case 10:
          _context.prev = 10;
          _context.t0 = _context["catch"](0);
          console.error('Failed to fetch Python versions:', _context.t0);
          return _context.abrupt("return", []);
        case 14:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 10]]);
  }));
  return _getAvailableVersions.apply(this, arguments);
}
function get_release_download_url() {
  return _get_release_download_url.apply(this, arguments);
}
/**
 * Ensure Python environment is set up in the specified location
 * @param {string|Object} options - Either download URL or options object
 * @param {string} [options.downloadUrl] - URL to download Python distribution from
 * @param {string} [options.localPath] - Local path to Python executable
 * @param {string} [options.version] - Python version to download (e.g., '3.12.8')
 * @returns {Promise<string>} Path to the Python executable
 */
function _get_release_download_url() {
  _get_release_download_url = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var version,
      arch,
      os,
      response,
      releases,
      release,
      assetName,
      asset,
      _args2 = arguments;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          version = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : '3.12.8';
          arch = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 'x86_64';
          os = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : 'windows';
          _context2.next = 5;
          return fetch('https://api.github.com/repos/bjia56/portable-python/releases');
        case 5:
          response = _context2.sent;
          _context2.next = 8;
          return response.json();
        case 8:
          releases = _context2.sent;
          // Find first release that starts with this version
          release = releases.find(function (r) {
            return r.tag_name.startsWith("cpython-v".concat(version));
          });
          if (release) {
            _context2.next = 12;
            break;
          }
          throw new Error("No release found for Python ".concat(version));
        case 12:
          assetName = "python-full-".concat(version, "-").concat(os, "-").concat(arch, ".zip");
          asset = release.assets.find(function (a) {
            return a.name === assetName;
          });
          if (asset) {
            _context2.next = 16;
            break;
          }
          throw new Error("Asset ".concat(assetName, " not found in release ").concat(release.tag_name));
        case 16:
          return _context2.abrupt("return", asset.browser_download_url);
        case 17:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _get_release_download_url.apply(this, arguments);
}
function ensure_environment() {
  return _ensure_environment.apply(this, arguments);
}
/**
 * Install Python packages using pip
 * @param {string[]} packages - List of packages to install
 * @returns {Promise<void>}
 */
function _ensure_environment() {
  _ensure_environment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var options,
      _options,
      downloadUrl,
      localPath,
      _options$version,
      version,
      pythonPath,
      baseDir,
      envDir,
      tempDir,
      pythonExe,
      zipPath,
      response,
      buffer,
      files,
      pythonDir,
      nestedDir,
      nestedFiles,
      _iterator,
      _step,
      file,
      srcPath,
      destPath,
      finalPythonPath,
      _args3 = arguments;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {
            version: '3.12.8'
          };
          console.log('ensure_environment called with options:', options);

          // Handle string input for backward compatibility
          if (typeof options === 'string') {
            options = {
              downloadUrl: options
            };
          }

          // Ensure options is an object
          if (!options || _typeof(options) !== 'object') {
            options = {
              version: '3.12.8'
            };
          }
          _options = options, downloadUrl = _options.downloadUrl, localPath = _options.localPath, _options$version = _options.version, version = _options$version === void 0 ? '3.12.8' : _options$version;
          console.log('Resolved options:', {
            downloadUrl: downloadUrl,
            localPath: localPath,
            version: version
          });

          // If localPath is provided and valid, use it
          if (!localPath) {
            _context3.next = 12;
            break;
          }
          pythonPath = getPythonExeFromDir(localPath);
          if (!pythonPath) {
            _context3.next = 11;
            break;
          }
          console.log('Using local Python installation:', pythonPath);
          return _context3.abrupt("return", pythonPath);
        case 11:
          console.warn('Local Python path invalid, falling back to download');
        case 12:
          if (!(!downloadUrl && version)) {
            _context3.next = 18;
            break;
          }
          console.log('Getting download URL for version:', version);
          _context3.next = 16;
          return get_release_download_url(version);
        case 16:
          downloadUrl = _context3.sent;
          console.log('Resolved download URL:', downloadUrl);
        case 18:
          if (downloadUrl) {
            _context3.next = 20;
            break;
          }
          throw new Error('Either downloadUrl, valid localPath, or version must be provided');
        case 20:
          baseDir = _path["default"].join(_os["default"].homedir(), '.eaglecooler');
          envDir = _path["default"].join(baseDir, 'pythonenv', 'env');
          tempDir = _path["default"].join(baseDir, 'temp', 'pythonenv'); // Create directories if they don't exist
          [envDir, tempDir].forEach(function (dir) {
            if (!_fs["default"].existsSync(dir)) {
              _fs["default"].mkdirSync(dir, {
                recursive: true
              });
            }
          });
          pythonExe = getPythonExeFromDir(envDir);
          if (!pythonExe) {
            _context3.next = 28;
            break;
          }
          console.log('Using existing Python installation:', pythonExe);
          return _context3.abrupt("return", pythonExe);
        case 28:
          // Download and extract Python
          zipPath = _path["default"].join(tempDir, 'python.zip'); // Download the file
          console.log('Downloading Python...');
          _context3.next = 32;
          return fetch(downloadUrl);
        case 32:
          response = _context3.sent;
          _context3.next = 35;
          return response.arrayBuffer();
        case 35:
          buffer = _context3.sent;
          _fs["default"].writeFileSync(zipPath, Buffer.from(buffer));

          // Extract to env directory
          console.log('Extracting Python...');
          _context3.next = 40;
          return (0, _native.nativeUnzip)(zipPath, envDir, true);
        case 40:
          // Move contents from nested directory to root env directory
          files = _fs["default"].readdirSync(envDir);
          pythonDir = files.find(function (f) {
            return f.startsWith('python-');
          });
          if (pythonDir) {
            nestedDir = _path["default"].join(envDir, pythonDir);
            nestedFiles = _fs["default"].readdirSync(nestedDir);
            console.log('Moving files from nested directory to root...');
            _iterator = _createForOfIteratorHelper(nestedFiles);
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                file = _step.value;
                srcPath = _path["default"].join(nestedDir, file);
                destPath = _path["default"].join(envDir, file);
                _fs["default"].renameSync(srcPath, destPath);
              }

              // Remove the now-empty nested directory
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            _fs["default"].rmdirSync(nestedDir);
          }

          // Clean up temp file
          _fs["default"].unlinkSync(zipPath);
          finalPythonPath = getPythonExeFromDir(envDir);
          if (finalPythonPath) {
            _context3.next = 47;
            break;
          }
          throw new Error('Failed to find Python executable after installation');
        case 47:
          console.log('Python environment setup completed.');
          return _context3.abrupt("return", finalPythonPath);
        case 49:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _ensure_environment.apply(this, arguments);
}
function pip_install(_x) {
  return _pip_install.apply(this, arguments);
}
/**
 * Set up a virtual environment for a specific plugin
 * @param {string} pluginId - The plugin's manifest ID
 * @returns {Promise<string>} Path to the virtual environment
 */
function _pip_install() {
  _pip_install = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(packages) {
    var pythonPath, command;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return ensure_environment();
        case 2:
          pythonPath = _context4.sent;
          command = "\"".concat(pythonPath, "\" -m pip install ").concat(packages.join(' '));
          console.log('Running pip install:', command);
          (0, _child_process.execSync)(command, {
            stdio: 'inherit'
          });
        case 6:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return _pip_install.apply(this, arguments);
}
function setup_plugin_venv(_x2) {
  return _setup_plugin_venv.apply(this, arguments);
}
function _setup_plugin_venv() {
  _setup_plugin_venv = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(pluginId) {
    var baseDir, pluginEnvDir, pythonPath;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          baseDir = _path["default"].join(_os["default"].homedir(), '.eaglecooler');
          pluginEnvDir = _path["default"].join(baseDir, 'pythonenv', 'perPlugin', pluginId); // Create plugin-specific venv directory
          if (!_fs["default"].existsSync(pluginEnvDir)) {
            _fs["default"].mkdirSync(pluginEnvDir, {
              recursive: true
            });
          }
          _context5.next = 5;
          return ensure_environment();
        case 5:
          pythonPath = _context5.sent;
          // Create virtual environment
          console.log("Creating virtual environment for plugin ".concat(pluginId, "..."));
          (0, _child_process.execSync)("\"".concat(pythonPath, "\" -m venv \"").concat(pluginEnvDir, "\""), {
            stdio: 'inherit'
          });
          return _context5.abrupt("return", pluginEnvDir);
        case 9:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return _setup_plugin_venv.apply(this, arguments);
}