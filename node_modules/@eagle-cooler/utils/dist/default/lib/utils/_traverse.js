"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDeep = getDeep;
exports.popDeep = popDeep;
exports.setDeep = setDeep;
exports.setDefaultDeep = setDefaultDeep;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Internal traversal helper for deep object operations
 * @param {object} obj - Target object
 * @param {string[]} keys - Path keys
 * @param {boolean} createMissing - Create missing keys
 * @return {any} Traversed value
 * @private
 */
function _traverse(obj, keys) {
  var createMissing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var curr = obj;
  var _iterator = _createForOfIteratorHelper(keys),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var key = _step.value;
      if (curr === null || curr === undefined) {
        throw new Error("Cannot traverse through null/undefined at key ".concat(key));
      }
      if (Array.isArray(curr)) {
        var index = parseInt(key);
        if (createMissing && index >= curr.length) {
          var _curr;
          (_curr = curr).push.apply(_curr, _toConsumableArray(Array(index - curr.length + 1).fill({})));
        }
        curr = curr[index];
      } else if (_typeof(curr) === 'object') {
        if (createMissing && !(key in curr)) {
          curr[key] = {};
        }
        curr = curr[key];
      } else {
        throw new Error("Cannot traverse through non-object type at key ".concat(key));
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return curr;
}

/**
 * Gets deep property from object using path
 * @param {object} obj - Target object
 * @param {string} path - Path in format 'a/b/c'
 * @return {any} Found value
 */
function getDeep(obj, path) {
  var keys = path.split('/');
  return _traverse(obj, keys);
}

/**
 * Sets deep property in object using path
 * @param {object} obj - Target object
 * @param {string} path - Path in format 'a/b/c'
 * @param {any} value - Value to set
 */
function setDeep(obj, path, value) {
  var keys = path.split('/');
  var lastKey = keys.pop();
  var target = _traverse(obj, keys, true);
  if (Array.isArray(target)) {
    var index = parseInt(lastKey);
    if (index >= target.length) {
      target.push.apply(target, _toConsumableArray(Array(index - target.length + 1).fill(null)));
    }
    target[index] = value;
  } else if (_typeof(target) === 'object') {
    target[lastKey] = value;
  } else {
    throw new Error('Cannot set property of non-object type');
  }
}

/**
 * Sets default value if path doesn't exist
 * @param {object} obj - Target object
 * @param {string} path - Path in format 'a/b/c'
 * @param {any} defaultValue - Default value to set
 * @return {any} Existing or newly set value
 */
function setDefaultDeep(obj, path, defaultValue) {
  var keys = path.split('/');
  var lastKey = keys.pop();
  var target = _traverse(obj, keys, true);
  if (Array.isArray(target)) {
    var index = parseInt(lastKey);
    if (index >= target.length) {
      target.push.apply(target, _toConsumableArray(Array(index - target.length + 1).fill(null)));
    }
    if (target[index] === undefined) {
      target[index] = defaultValue;
    }
    return target[index];
  } else if (_typeof(target) === 'object') {
    if (!(lastKey in target)) {
      target[lastKey] = defaultValue;
    }
    return target[lastKey];
  }
  throw new Error('Cannot set default property of non-object type');
}

/**
 * Removes and returns value at path
 * @param {object} obj - Target object
 * @param {string} path - Path in format 'a/b/c'
 * @param {any} [defaultValue] - Default value if not found
 * @return {any} Removed value or default
 */
function popDeep(obj, path) {
  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var keys = path.split('/');
  var lastKey = keys.pop();
  var target = _traverse(obj, keys);
  var value;
  if (Array.isArray(target)) {
    var index = parseInt(lastKey);
    value = index < target.length ? target[index] : defaultValue;
    if (index < target.length) {
      target.splice(index, 1);
    }
  } else if (_typeof(target) === 'object') {
    value = lastKey in target ? target[lastKey] : defaultValue;
    delete target[lastKey];
  } else {
    throw new Error('Cannot pop property of non-object type');
  }
  return value;
}